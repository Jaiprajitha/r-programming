                                              
1.Demonstrate Vector Recycling in R.
Code:
a<-c(33,55,77,99,23)
b<-c(34,78,98,56,30)
s<-a+b
s
output:

> a<-c(33,55,77,99,23)
> b<-c(34,78,98,56,30)
> s<-a+b
> s
[1]  67 133 175 155  53
>
  2. Demonstrate the usage of apply function in R

Code:
m1 <- matrix(C<-(1:10),nrow=4, ncol=5)
m1
b_m1 <- apply(m1, 2, sum)
b_m1

output:


> m1 <- matrix(C<-(1:10),nrow=4, ncol=5)
> m1
     [,1] [,2] [,3] [,4] [,5]
[1,]    1    5    9    3    7
[2,]    2    6   10    4    8
[3,]    3    7    1    5    9
[4,]    4    8    2    6   10
> b_m1 <- apply(m1, 2, sum)
> b_m1
[1] 10 26 22 18 34
3.  Demonstrate the usage of lapply function in R
Code:
town <- c("arakkonan","karaikudi","avadi","perambur")
town_lower <-lapply(town, tolower)
str(town_lower)
output:
> town <- c("arakkonan","karaikudi","avadi","perambur")
> town_lower <-lapply(town, tolower)
> str(town_lower)
List of 4
 $ : chr "arakkonan"
 $ : chr "karaikudi"
 $ : chr "avadi"
 $ : chr "perambur"
4. Demonstrate the usage of sapply function in R
Code:
dt <- cars
lmn_cars <- lapply(dt, min)
smn_cars <- sapply(dt, min)
lmn_cars

output:
> dt <- cars
> lmn_cars <- lapply(dt, min)
> smn_cars <- sapply(dt, min)
> lmn_cars
$speed
[1] 4

$dist
[1] 2

>
5.
Code:
set.seed(2)

data_set <- data.frame(price = round(rnorm(25, sd = 10, mean = 30)),
                       
                       type = sample(1:4, size = 25, replace = TRUE),
                       
                       store = sample(paste("Store", 1:4),
                                      
                                      size = 25, replace = TRUE))

head(data_set)

price <- data_set$price

store <- data_set$store

type <- factor(data_set$type,labels = c("toy", "food", "electronics", "drinks"))

mean_prices <- tapply(price, type, mean)

mean_prices
ouput: 
> set.seed(2)
> 
> data_set <- data.frame(price = round(rnorm(25, sd = 10, mean = 30)),
+                        
+                        type = sample(1:4, size = 25, replace = TRUE),
+                        
+                        store = sample(paste("Store", 1:4),
+                                       
+                                       size = 25, replace = TRUE))
> 
> head(data_set)
  price type   store
1    21    2 Store 2
2    32    3 Store 3
3    46    4 Store 4
4    19    3 Store 4
5    29    1 Store 4
6    31    3 Store 4
> 
> price <- data_set$price
> 
> store <- data_set$store
> 
> type <- factor(data_set$type,labels = c("toy", "food", "electronics", "drinks"))
> 
> mean_prices <- tapply(price, type, mean)
> 
> mean_prices
        toy        food electronics      drinks 
   39.50000    30.33333    32.20000    29.33333 
>
6. Demonstrate the usage of mapply function in R
Code:
x<-c(1,2,4,5)
y<-c(6,8,9,7)
result<-mapply(sum,x,y)
print(result)
output:

> x<-c(1,2,4,5)
> y<-c(6,8,9,7)
> result<-mapply(sum,x,y)
> print(result)
[1]  7 10 13 12
7. Sum of Natural Numbers using Recursion
Code:
sum<-function(n)
{
  if(n<=1){
    return(n)
  }
  else{
    return(n+sum(n-1))
  }
}
sum(8)
output:
> sum(8)
[1] 36
8.  Write a program to generate Fibonacci sequence using Recursion in R
Code: rec <- function(n) {
  if(n <= 1) {
    return(n)
  } else {
    return(rec(n-1) + rec(n-2))
  }
}
nterms = as.integer(readline(prompt="How many terms? "))
if(nterms <= 0) {
  print("Plese enter a positive integer")
} else {
  print("Fibonacci sequence:")
  for(i in 0:(nterms-1)) {
    print(rec(i))
  }
}
Output:
How many terms? 9
[1] "Fibonacci sequence:"
[1] 0
[1] 1
[1] 1
[1] 2
[1] 3
[1] 5
[1] 8
[1] 13
[1] 21
 9. Write a program to find factorial of a number in R using recursion.
Code:
recur_factorial <- function(n) {
if(n <= 1) {
return(1)
} else { 
return(n * recur_factorial(n-1))
}
}
Output:
> recur_factorial(5)
[1] 120
Exercise 1
Consider two vectors: x=seq(1,43,along.with=Id)
y=seq(-20,0,along.with=Id)
Create a data frame ‘df’ as shown below.
&gt;df
Id Letter x y
1 1 a 1.000000 -20.000000
2 1 b 4.818182 -18.181818
3 1 c 8.636364 -16.363636
4 2 a 12.454545 -14.545455
5 2 b 16.272727 -12.727273
6 2 c 20.090909 -10.909091
7 3 a 23.909091 -9.090909
8 3 b 27.727273 -7.272727
9 3 c 31.545455 -5.454545
10 4 a 35.363636 -3.636364
11 4 b 39.181818 -1.818182
12 4 c 43.000000 0.000000
Code:
Id <- rep(1:4, each = 3)
x=seq(1,43,along.with=Id)
y=seq(-20,0,along.with=Id)
Letter=rep(letters[1:3],4)

df <- data.frame(Id,Letter,x,y)
df
output:

   Id Letter         x          y
1   1      a  1.000000 -20.000000
2   1      b  4.818182 -18.181818
3   1      c  8.636364 -16.363636
4   2      a 12.454545 -14.545455
5   2      b 16.272727 -12.727273
6   2      c 20.090909 -10.909091
7   3      a 23.909091  -9.090909
8   3      b 27.727273  -7.272727
9   3      c 31.545455  -5.454545
10  4      a 35.363636  -3.636364
11  4      b 39.181818  -1.818182
12  4      c 43.000000   0.000000
> 
Exercise 2

Using the data frame ‘df’ in Exercise1, Construct the following data frame. Id
x.ay.ax.by.bx.cy.c 1 1 1.00000 -20.000000 4.818182 -18.181818
8.636364 -16.363636 4 2 12.45455 -14.545455 16.272727 -12.727273
20.090909 -10.909091 7 3 23.90909 -9.090909 27.727273 -7.272727
31.545455 -5.454545 10 4 35.36364 -3.636364 39.181818 -1.818182
43.000000 0.000000
Code:
reshape(df,timevar='Letter',idvar='Id',direction='wide')
output:
>reshape(df,timevar='Letter',idvar='Id',direction='wide')
   Id      x.a        y.a       x.b        y.b       x.c        y.c
1   1  1.00000 -20.000000  4.818182 -18.181818  8.636364 -16.363636
4   2 12.45455 -14.545455 16.272727 -12.727273 20.090909 -10.909091
7   3 23.90909  -9.090909 27.727273  -7.272727 31.545455  -5.454545
10  4 35.36364  -3.636364 39.181818  -1.818182 43.000000   0.000000
Exercise 3
Create two data frame df1 and df2:
&gt; df1
Id Age
1 1 14
2 2 12
3 3 15
4 4 10
&gt; df2
Id Sex Code
1 1 F a
2 2 M b
3 3 M c
4 4 F d
From df1 and df2 create M:
&gt;M
Id Age Sex Code
1 1 14 F a
2 2 12 M b
3 3 15 M c 4 4 10 F d
Id <- c(1:4)
Age <- c(14,12,15,10)
df1 <- data.frame(Id,Age)
df1
Sex <- c("F","M","M","F")
Code <- letters[1:4]
df2 <- data.frame(Id,Sex,Code)
df2
output:
> Id <- c(1:4)
> Age <- c(14,12,15,10)
> df1 <- data.frame(Id,Age)
> df1
  Id Age
1  1  14
2  2  12
3  3  15
4  4  10
> Sex <- c("F","M","M","F")
> Code <- letters[1:4]
> df2 <- data.frame(Id,Sex,Code)
> df2
  Id Sex Code
1  1   F    a
2  2   M    b
3  3   M    c
4  4   F    d
Exercise 4
Create a data frame df3:
&gt; df3 id2
score 1 4
100
2 3 98
3 2 94
4 1 99
From M (used in Exercise-3) and df3 create N:
Id Age Sex Code score
1 1 14 F a 99
2 2 12 M b 94

3 3 15 M c 98 4 4 10 F d 100
Code: id2 <- 4:1
score <- c(100,98,94,99)
df3 <- data.frame(id2,score)
N=merge(M,df3,by.x='Id',by.y='id2')
N
Output:
Id Age Sex Code score
 1  1  14   F    a    99
 2  2  12   M    b    94
 3  3  15   M    c    98
 4  4  10   F    d   100
5. Consider the previous one data frame N:
1) Remove the variables Sex and Code
2) From N, create a data frame:
values ind
1 1 Id
2 2 Id
3 3 Id
4 4 Id
5 14 Age
6 12 Age
7 15 Age
8 10 Age
9 99 score
10 94 score
11 98 score
12 100 score
Code:
N[,c("Sex")]=NULL
N[,c("Code")]=NULL
stack(N)
output:

   values   ind
 1       1    Id
 2       2    Id
 3       3    Id
 4       4    Id
 5      14   Age
 6      12   Age
 7      15   Age
 8      10   Age
 9      99 score
 10     94 score
 11     98 score
 12    100 score
 



